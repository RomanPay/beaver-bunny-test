{"version":3,"file":"72.bundle.js","mappings":"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","sources":["webpack://pixi_webpack_template/./node_modules/pixi.js/lib/app/ResizePlugin.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/app/TickerPlugin.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/app/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/filters/FilterPipe.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/container/bounds/getFastGlobalBounds.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/filters/FilterSystem.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/filters/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/graphics/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/mesh/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/AbstractBitmapFont.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/utils/resolveCharacters.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/BitmapFont.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontTextParser.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLParser.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLStringParser.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/asset/loadBitmapFont.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/HtmlTextStyle.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/utils/browser/isSafari.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text-html/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text/canvas/utils/getCanvasFillStyle.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text/init.mjs","webpack://pixi_webpack_template/./node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nfunction getFastGlobalBounds(target, bounds) {\n  bounds.clear();\n  _getGlobalBoundsRecursive(target, bounds);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  if (!target.renderGroup) {\n    bounds.applyMatrix(target.parentRenderGroup.worldTransform);\n  } else {\n    bounds.applyMatrix(target.renderGroup.localTransform);\n  }\n  return bounds;\n}\nfunction _getGlobalBoundsRecursive(target, bounds) {\n  if (target.localDisplayStatus !== 7 || !target.measurable) {\n    return;\n  }\n  const manageEffects = !!target.effects.length;\n  let localBounds = bounds;\n  if (target.renderGroup || manageEffects) {\n    localBounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, target.worldTransform);\n  } else {\n    if (target.renderPipeId) {\n      const viewBounds = target.bounds;\n      localBounds.addFrame(\n        viewBounds.minX,\n        viewBounds.minY,\n        viewBounds.maxX,\n        viewBounds.maxY,\n        target.groupTransform\n      );\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getGlobalBoundsRecursive(children[i], localBounds);\n    }\n  }\n  if (manageEffects) {\n    let advanced = false;\n    for (let i = 0; i < target.effects.length; i++) {\n      if (target.effects[i].addBounds) {\n        if (!advanced) {\n          advanced = true;\n          localBounds.applyMatrix(target.parentRenderGroup.worldTransform);\n        }\n        target.effects[i].addBounds(localBounds, true);\n      }\n    }\n    if (advanced) {\n      localBounds.applyMatrix(target.parentRenderGroup.worldTransform.copyTo(tempMatrix).invert());\n      bounds.addBounds(localBounds, target.relativeGroupTransform);\n    }\n    bounds.addBounds(localBounds);\n    boundsPool.return(localBounds);\n  } else if (target.renderGroup) {\n    bounds.addBounds(localBounds, target.relativeGroupTransform);\n    boundsPool.return(localBounds);\n  }\n}\n\nexport { _getGlobalBoundsRecursive, getFastGlobalBounds };\n//# sourceMappingURL=getFastGlobalBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      location: 0,\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      getFastGlobalBounds(instruction.container, bounds);\n    }\n    const colorTextureSource = renderer.renderTarget.rootRenderTarget.colorTexture.source;\n    let resolution = colorTextureSource._resolution;\n    let padding = 0;\n    let antialias = colorTextureSource.antialias;\n    let blendRequired = false;\n    let enabled = false;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias !== \"inherit\") {\n        if (filter.antialias === \"on\") {\n          antialias = true;\n        } else {\n          antialias = false;\n        }\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired = blendRequired || filter.blendRequired;\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    const viewPort = renderer.renderTarget.rootViewPort;\n    bounds.scale(resolution).fitBounds(0, viewPort.width, 0, viewPort.height).scale(1 / resolution).pad(padding).ceil();\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    renderable.addBounds(bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n","import { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\n\n\"use strict\";\nconst batchSamplersUniformGroupHash = {};\nfunction getBatchSamplersUniformGroup(maxTextures) {\n  let batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures];\n  if (batchSamplersUniformGroup)\n    return batchSamplersUniformGroup;\n  const sampleValues = new Int32Array(maxTextures);\n  for (let i = 0; i < maxTextures; i++) {\n    sampleValues[i] = i;\n  }\n  batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures] = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: maxTextures }\n  }, { isStatic: true });\n  return batchSamplersUniformGroup;\n}\n\nexport { getBatchSamplersUniformGroup };\n//# sourceMappingURL=getBatchSamplersUniformGroup.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const { width, height } = canvasAndContext.canvas;\n    const key = (width << 17) + (height << 1);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexport { CanvasPool, CanvasPoolClass };\n//# sourceMappingURL=CanvasPool.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics._didGraphicsUpdate) {\n      graphics._didGraphicsUpdate = false;\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch.batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", () => {\n        this.destroyRenderable(graphics);\n      });\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      const texture = mesh.texture;\n      if (batchableMesh.texture._source !== texture._source) {\n        if (batchableMesh.texture._source !== texture._source) {\n          return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, texture);\n        }\n      }\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add({\n        renderPipeId: \"mesh\",\n        mesh\n      });\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh.batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n  }\n  execute({ mesh }) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = mesh.groupBlendMode;\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", () => {\n      this.destroyRenderable(mesh);\n    });\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.mesh = mesh;\n    gpuMesh.texture = mesh._texture;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    gpuMesh.mesh = mesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcher = null;\n    this.batch = null;\n    this.roundPixels = 0;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get blendMode() {\n    return this.mesh.groupBlendMode;\n  }\n  reset() {\n    this.mesh = null;\n    this.texture = null;\n    this.batcher = null;\n    this.batch = null;\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    const indices = this.geometry.indices;\n    for (let i = 0; i < indices.length; i++) {\n      indexBuffer[index++] = indices[i] + indicesOffset;\n    }\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const mesh = this.mesh;\n    const geometry = this.geometry;\n    const wt = mesh.groupTransform;\n    const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const positions = geometry.positions;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    const abgr = mesh.groupColorAlpha;\n    for (let i = 0; i < positions.length; i += 2) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      float32View[index] = a * x + c * y + tx;\n      float32View[index + 1] = b * x + d * y + ty;\n      float32View[index + 2] = transformedUvs[i];\n      float32View[index + 3] = transformedUvs[i + 1];\n      uint32View[index + 4] = abgr;\n      uint32View[index + 5] = textureIdAndRound;\n      index += 6;\n    }\n  }\n  get vertexSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const positions = this.positions;\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this.width > w ? 1 : this.width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this.height > h ? 1 : this.height / h;\n    const scale = Math.min(scaleW, scaleH);\n    positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n    positions[17] = positions[19] = positions[21] = positions[23] = this.height - this._bottomHeight * scale;\n    positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n    positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n    positions[4] = positions[12] = positions[20] = positions[28] = this.width - this._rightWidth * scale;\n    positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = new BatchableMesh();\n    batchableMesh.geometry = new NineSliceGeometry();\n    batchableMesh.mesh = sprite;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    sprite.on(\"destroyed\", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (batchableMesh.texture._source !== renderable.texture._source) {\n        return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture);\n      }\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite._didTilingSpriteUpdate) {\n        tilingSprite._didTilingSpriteUpdate = false;\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.mesh = tilingSprite;\n        batchableMesh.texture = tilingSprite._texture;\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: State.default2d\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite._didTilingSpriteUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh.batcher.updateElement(batchableMesh);\n    } else if (tilingSprite._didTilingSpriteUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n    tilingSprite._didTilingSpriteUpdate = false;\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", () => {\n      this.destroyRenderable(tilingSprite);\n    });\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite._applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nclass AbstractBitmapFont extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** The map of characters by character code. */\n    this.chars = /* @__PURE__ */ Object.create(null);\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    this.lineHeight = 0;\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    this.fontFamily = \"\";\n    /** The metrics of the font face. */\n    this.fontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    this.baseLineOffset = 0;\n    /** The range and type of the distance field for this font. */\n    this.distanceField = { type: \"none\", range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    this.pages = [];\n    /** The size of the font face in pixels. */\n    this.baseMeasurementFontSize = 100;\n    this.baseRenderedFontSize = 100;\n  }\n  /**\n   * The name of the font face.\n   * @deprecated since 8.0.0 Use `fontFamily` instead.\n   */\n  get font() {\n    deprecation(v8_0_0, \"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.\");\n    return this.fontFamily;\n  }\n  /**\n   * The map of base page textures (i.e., sheets of glyphs).\n   * @deprecated since 8.0.0 Use `pages` instead.\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  /**\n   * The size of the font face in pixels.\n   * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n   */\n  get size() {\n    deprecation(v8_0_0, \"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.\");\n    return this.fontMetrics.fontSize;\n  }\n  /**\n   * The kind of distance field for this font or \"none\".\n   * @deprecated since 8.0.0 Use `distanceField.type` instead.\n   */\n  get distanceFieldRange() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.\");\n    return this.distanceField.range;\n  }\n  /**\n   * The range of the distance field in pixels.\n   * @deprecated since 8.0.0 Use `distanceField.range` instead.\n   */\n  get distanceFieldType() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.\");\n    return this.distanceField.type;\n  }\n  destroy(destroyTextures = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    for (const i in this.chars) {\n      this.chars[i].texture.destroy();\n    }\n    this.chars = null;\n    if (destroyTextures) {\n      this.pages.forEach((page) => page.texture.destroy(true));\n      this.pages = null;\n    }\n  }\n}\n\nexport { AbstractBitmapFont };\n//# sourceMappingURL=AbstractBitmapFont.mjs.map\n","\"use strict\";\nfunction resolveCharacters(chars) {\n  if (chars === \"\") {\n    return [];\n  }\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      }\n      if (item[0].length === 0 || item[1].length === 0) {\n        throw new Error(\"[BitmapFont]: Invalid character delimiter.\");\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...Array.from(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\n\nexport { resolveCharacters };\n//# sourceMappingURL=resolveCharacters.mjs.map\n","import { Color } from '../../color/Color.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nclass DynamicBitmapFont extends AbstractBitmapFont {\n  /**\n   * @param options - The options for the dynamic bitmap font.\n   */\n  constructor(options) {\n    super();\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    this.resolution = 1;\n    /** The pages of the font. */\n    this.pages = [];\n    this._padding = 4;\n    this._measureCache = /* @__PURE__ */ Object.create(null);\n    this._currentChars = [];\n    this._currentX = 0;\n    this._currentY = 0;\n    this._currentPageIndex = -1;\n    this._skipKerning = false;\n    const dynamicOptions = options;\n    const style = dynamicOptions.style.clone();\n    if (dynamicOptions.overrideFill) {\n      style._fill.color = 16777215;\n      style._fill.alpha = 1;\n      style._fill.texture = Texture.WHITE;\n      style._fill.fill = null;\n    }\n    const requestedFontSize = style.fontSize;\n    style.fontSize = this.baseMeasurementFontSize;\n    const font = fontStringFromTextStyle(style);\n    if (dynamicOptions.overrideSize) {\n      if (style._stroke) {\n        style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n      }\n    } else {\n      style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n    }\n    this._style = style;\n    this._skipKerning = dynamicOptions.skipKerning ?? false;\n    this.resolution = dynamicOptions.resolution ?? 1;\n    this._padding = dynamicOptions.padding ?? 4;\n    this.fontMetrics = CanvasTextMetrics.measureFont(font);\n    this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n  }\n  ensureCharacters(chars) {\n    const charList = resolveCharacters(chars).filter((char) => !this._currentChars.includes(char)).filter((char, index, self) => self.indexOf(char) === index);\n    if (!charList.length)\n      return;\n    this._currentChars = [...this._currentChars, ...charList];\n    let pageData;\n    if (this._currentPageIndex === -1) {\n      pageData = this._nextPage();\n    } else {\n      pageData = this.pages[this._currentPageIndex];\n    }\n    let { canvas, context } = pageData.canvasAndContext;\n    let textureSource = pageData.texture.source;\n    const style = this._style;\n    let currentX = this._currentX;\n    let currentY = this._currentY;\n    const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n    const padding = this._padding * fontScale;\n    const widthScale = style.fontStyle === \"italic\" ? 2 : 1;\n    let maxCharHeight = 0;\n    let skipTexture = false;\n    for (let i = 0; i < charList.length; i++) {\n      const char = charList[i];\n      const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n      metrics.lineHeight = metrics.height;\n      const width = widthScale * metrics.width * fontScale;\n      const height = metrics.height * fontScale;\n      const paddedWidth = width + padding * 2;\n      const paddedHeight = height + padding * 2;\n      skipTexture = false;\n      if (char !== \"\\n\" && char !== \"\\r\" && char !== \"\t\" && char !== \" \") {\n        skipTexture = true;\n        maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));\n      }\n      if (currentX + paddedWidth > 512) {\n        currentY += maxCharHeight;\n        maxCharHeight = paddedHeight;\n        currentX = 0;\n        if (currentY + maxCharHeight > 512) {\n          textureSource.update();\n          const pageData2 = this._nextPage();\n          canvas = pageData2.canvasAndContext.canvas;\n          context = pageData2.canvasAndContext.context;\n          textureSource = pageData2.texture.source;\n          currentY = 0;\n        }\n      }\n      const xAdvance = width / fontScale - (style.dropShadow?.distance ?? 0) - (style._stroke?.width ?? 0);\n      this.chars[char] = {\n        id: char.codePointAt(0),\n        xOffset: -this._padding,\n        yOffset: -this._padding,\n        xAdvance,\n        kerning: {}\n      };\n      if (skipTexture) {\n        this._drawGlyph(\n          context,\n          metrics,\n          currentX + padding,\n          currentY + padding,\n          fontScale,\n          style\n        );\n        const px = textureSource.width * fontScale;\n        const py = textureSource.height * fontScale;\n        const frame = new Rectangle(\n          currentX / px * textureSource.width,\n          currentY / py * textureSource.height,\n          paddedWidth / px * textureSource.width,\n          paddedHeight / py * textureSource.height\n        );\n        this.chars[char].texture = new Texture({\n          source: textureSource,\n          frame\n        });\n        currentX += Math.ceil(paddedWidth);\n      }\n    }\n    textureSource.update();\n    this._currentX = currentX;\n    this._currentY = currentY;\n    this._skipKerning && this._applyKerning(charList, context);\n  }\n  /**\n   * @deprecated since 8.0.0\n   * The map of base page textures (i.e., sheets of glyphs).\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  _applyKerning(newChars, context) {\n    const measureCache = this._measureCache;\n    for (let i = 0; i < newChars.length; i++) {\n      const first = newChars[i];\n      for (let j = 0; j < this._currentChars.length; j++) {\n        const second = this._currentChars[j];\n        let c1 = measureCache[first];\n        if (!c1)\n          c1 = measureCache[first] = context.measureText(first).width;\n        let c2 = measureCache[second];\n        if (!c2)\n          c2 = measureCache[second] = context.measureText(second).width;\n        let total = context.measureText(first + second).width;\n        let amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[first].kerning[second] = amount;\n        }\n        total = context.measureText(first + second).width;\n        amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[second].kerning[first] = amount;\n        }\n      }\n    }\n  }\n  _nextPage() {\n    this._currentPageIndex++;\n    const textureResolution = this.resolution;\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(512, 512, textureResolution);\n    this._setupContext(canvasAndContext.context, this._style, textureResolution);\n    const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n    const texture = new Texture({\n      source: new ImageSource({\n        resource: canvasAndContext.canvas,\n        resolution,\n        alphaMode: \"premultiply-alpha-on-upload\"\n      })\n    });\n    const pageData = {\n      canvasAndContext,\n      texture\n    };\n    this.pages[this._currentPageIndex] = pageData;\n    return pageData;\n  }\n  // canvas style!\n  _setupContext(context, style, resolution) {\n    style.fontSize = this.baseRenderedFontSize;\n    context.scale(resolution, resolution);\n    context.font = fontStringFromTextStyle(style);\n    style.fontSize = this.baseMeasurementFontSize;\n    context.textBaseline = style.textBaseline;\n    const stroke = style._stroke;\n    const strokeThickness = stroke?.width ?? 0;\n    if (stroke) {\n      context.lineWidth = strokeThickness;\n      context.lineJoin = stroke.join;\n      context.miterLimit = stroke.miterLimit;\n      context.strokeStyle = getCanvasFillStyle(stroke, context);\n    }\n    if (style._fill) {\n      context.fillStyle = getCanvasFillStyle(style._fill, context);\n    }\n    if (style.dropShadow) {\n      const shadowOptions = style.dropShadow;\n      const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n      const dropShadowBlur = shadowOptions.blur * resolution;\n      const dropShadowDistance = shadowOptions.distance * resolution;\n      context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n      context.shadowBlur = dropShadowBlur;\n      context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n      context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n    } else {\n      context.shadowColor = \"black\";\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n  }\n  _drawGlyph(context, metrics, x, y, fontScale, style) {\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n    const stroke = style._stroke;\n    const strokeThickness = (stroke?.width ?? 0) * fontScale;\n    const tx = x + strokeThickness / 2;\n    const ty = y - strokeThickness / 2;\n    const descent = fontProperties.descent * fontScale;\n    const lineHeight = metrics.lineHeight * fontScale;\n    if (style.stroke && strokeThickness) {\n      context.strokeText(char, tx, ty + lineHeight - descent);\n    }\n    if (style._fill) {\n      context.fillText(char, tx, ty + lineHeight - descent);\n    }\n  }\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { canvasAndContext, texture } = this.pages[i];\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n}\n\nexport { DynamicBitmapFont };\n//# sourceMappingURL=DynamicBitmapFont.mjs.map\n","\"use strict\";\nfunction getBitmapTextLayout(chars, style, font) {\n  const layoutData = {\n    width: 0,\n    height: 0,\n    offsetY: 0,\n    scale: style.fontSize / font.baseMeasurementFontSize,\n    lines: [{\n      width: 0,\n      charPositions: [],\n      spaceWidth: 0,\n      spacesIndex: [],\n      chars: []\n    }]\n  };\n  layoutData.offsetY = font.baseLineOffset;\n  let currentLine = layoutData.lines[0];\n  let previousChar = null;\n  let firstWord = true;\n  const currentWord = {\n    spaceWord: false,\n    width: 0,\n    start: 0,\n    index: 0,\n    // use index to not modify the array as we use it a lot!\n    positions: [],\n    chars: []\n  };\n  const nextWord = (word) => {\n    const start = currentLine.width;\n    for (let j = 0; j < currentWord.index; j++) {\n      const position = word.positions[j];\n      currentLine.chars.push(word.chars[j]);\n      currentLine.charPositions.push(position + start);\n    }\n    currentLine.width += word.width;\n    firstWord = false;\n    currentWord.width = 0;\n    currentWord.index = 0;\n    currentWord.chars.length = 0;\n  };\n  const nextLine = () => {\n    let index = currentLine.chars.length - 1;\n    let lastChar = currentLine.chars[index];\n    while (lastChar === \" \") {\n      currentLine.width -= font.chars[lastChar].xAdvance;\n      lastChar = currentLine.chars[--index];\n    }\n    layoutData.width = Math.max(layoutData.width, currentLine.width);\n    currentLine = {\n      width: 0,\n      charPositions: [],\n      chars: [],\n      spaceWidth: 0,\n      spacesIndex: []\n    };\n    firstWord = true;\n    layoutData.lines.push(currentLine);\n    layoutData.height += font.lineHeight;\n  };\n  const scale = font.baseMeasurementFontSize / style.fontSize;\n  const adjustedLetterSpacing = style.letterSpacing * scale;\n  const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n  for (let i = 0; i < chars.length + 1; i++) {\n    let char;\n    const isEnd = i === chars.length;\n    if (!isEnd) {\n      char = chars[i];\n    }\n    const charData = font.chars[char] || font.chars[\" \"];\n    const isSpace = /(?:\\s)/.test(char);\n    const isWordBreak = isSpace || char === \"\\r\" || char === \"\\n\" || isEnd;\n    if (isWordBreak) {\n      const addWordToNextLine = !firstWord && style.wordWrap && currentLine.width + currentWord.width - adjustedLetterSpacing > adjustedWordWrapWidth;\n      if (addWordToNextLine) {\n        nextLine();\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      } else {\n        currentWord.start = currentLine.width;\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        if (currentLine.width !== 0) {\n          nextLine();\n        }\n      } else if (!isEnd) {\n        const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n        currentLine.width += spaceWidth;\n        currentLine.spaceWidth = spaceWidth;\n        currentLine.spacesIndex.push(currentLine.charPositions.length);\n        currentLine.chars.push(char);\n      }\n    } else {\n      const kerning = charData.kerning[previousChar] || 0;\n      const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n      currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n      currentWord.chars.push(char);\n      currentWord.width += nextCharWidth;\n    }\n    previousChar = char;\n  }\n  nextLine();\n  if (style.align === \"center\") {\n    alignCenter(layoutData);\n  } else if (style.align === \"right\") {\n    alignRight(layoutData);\n  } else if (style.align === \"justify\") {\n    alignJustify(layoutData);\n  }\n  return layoutData;\n}\nfunction alignCenter(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width / 2 - line.width / 2;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignRight(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width - line.width;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignJustify(measurementData) {\n  const width = measurementData.width;\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    let indy = 0;\n    let spaceIndex = line.spacesIndex[indy++];\n    let offset = 0;\n    const totalSpaces = line.spacesIndex.length;\n    const newSpaceWidth = (width - line.width) / totalSpaces;\n    const spaceWidth = newSpaceWidth;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      if (j === spaceIndex) {\n        spaceIndex = line.spacesIndex[indy++];\n        offset += spaceWidth;\n      }\n      line.charPositions[j] += offset;\n    }\n  }\n}\n\nexport { getBitmapTextLayout };\n//# sourceMappingURL=getBitmapTextLayout.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill) {\n      fontFamilyKey += style._fill.fill.uid;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fnt.once(\"destroy\", () => Cache.remove(fontFamilyKey));\n      Cache.set(\n        fontFamilyKey,\n        fnt\n      );\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   */\n  getLayout(text, style) {\n    const bitmapFont = this.getFont(text, style);\n    return getBitmapTextLayout([...text], style, bitmapFont);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   */\n  measureText(text, style) {\n    return this.getLayout(text, style);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = { ...this.defaultOptions, ...options };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.get(cacheKey);\n    if (font) {\n      Cache.remove(cacheKey);\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\n\nexport { BitmapFontManager };\n//# sourceMappingURL=BitmapFontManager.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\n\n\"use strict\";\nclass BitmapFont extends AbstractBitmapFont {\n  constructor(options, url) {\n    super();\n    const { textures, data } = options;\n    Object.keys(data.pages).forEach((key) => {\n      const pageData = data.pages[parseInt(key, 10)];\n      const texture = textures[pageData.id];\n      this.pages.push({ texture });\n    });\n    Object.keys(data.chars).forEach((key) => {\n      const charData = data.chars[key];\n      const {\n        frame: textureFrame,\n        source: textureSource\n      } = textures[charData.page];\n      const frameReal = new Rectangle(\n        charData.x + textureFrame.x,\n        charData.y + textureFrame.y,\n        charData.width,\n        charData.height\n      );\n      const texture = new Texture({\n        source: textureSource,\n        frame: frameReal\n      });\n      this.chars[key] = {\n        id: key.codePointAt(0),\n        xOffset: charData.xOffset,\n        yOffset: charData.yOffset,\n        xAdvance: charData.xAdvance,\n        kerning: charData.kerning ?? {},\n        texture\n      };\n    });\n    this.baseRenderedFontSize = data.fontSize;\n    this.baseMeasurementFontSize = data.fontSize;\n    this.fontMetrics = {\n      ascent: 0,\n      descent: 0,\n      fontSize: data.fontSize\n    };\n    this.baseLineOffset = data.baseLineOffset;\n    this.lineHeight = data.lineHeight;\n    this.fontFamily = data.fontFamily;\n    this.distanceField = data.distanceField ?? {\n      type: \"none\",\n      range: 0\n    };\n    this.url = url;\n  }\n  /** Destroys the BitmapFont object. */\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { texture } = this.pages[i];\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n  /**\n   * Generates a bitmap-font for the given style and character set\n   * @param options - Setup options for font generation.\n   * @returns Font generated by style options.\n   * @example\n   * import { BitmapFont, BitmapText } from 'pixi.js';\n   *\n   * BitmapFont.install('TitleFont', {\n   *     fontFamily: 'Arial',\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: 'purple',\n   * });\n   *\n   * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n   */\n  static install(options) {\n    BitmapFontManager.install(options);\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  static uninstall(name) {\n    BitmapFontManager.uninstall(name);\n  }\n}\n\nexport { BitmapFont };\n//# sourceMappingURL=BitmapFont.mjs.map\n","\"use strict\";\nconst bitmapFontTextParser = {\n  test(data) {\n    return typeof data === \"string\" && data.startsWith(\"info face=\");\n  },\n  parse(txt) {\n    const items = txt.match(/^[a-z]+\\s+.+$/gm);\n    const rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n    for (const i in items) {\n      const name = items[i].match(/^[a-z]+/gm)[0];\n      const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n      const itemData = {};\n      for (const i2 in attributeList) {\n        const split = attributeList[i2].split(\"=\");\n        const key = split[0];\n        const strValue = split[1].replace(/\"/gm, \"\");\n        const floatValue = parseFloat(strValue);\n        const value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      rawData[name].push(itemData);\n    }\n    const font = {\n      chars: {},\n      pages: [],\n      lineHeight: 0,\n      fontSize: 0,\n      fontFamily: \"\",\n      distanceField: null,\n      baseLineOffset: 0\n    };\n    const [info] = rawData.info;\n    const [common] = rawData.common;\n    const [distanceField] = rawData.distanceField ?? [];\n    if (distanceField) {\n      font.distanceField = {\n        range: parseInt(distanceField.distanceRange, 10),\n        type: distanceField.fieldType\n      };\n    }\n    font.fontSize = parseInt(info.size, 10);\n    font.fontFamily = info.face;\n    font.lineHeight = parseInt(common.lineHeight, 10);\n    const page = rawData.page;\n    for (let i = 0; i < page.length; i++) {\n      font.pages.push({\n        id: parseInt(page[i].id, 10) || 0,\n        file: page[i].file\n      });\n    }\n    const map = {};\n    font.baseLineOffset = font.lineHeight - parseInt(common.base, 10);\n    const char = rawData.char;\n    for (let i = 0; i < char.length; i++) {\n      const charNode = char[i];\n      const id = parseInt(charNode.id, 10);\n      let letter = charNode.letter ?? charNode.char ?? String.fromCharCode(id);\n      if (letter === \"space\")\n        letter = \" \";\n      map[id] = letter;\n      font.chars[letter] = {\n        id,\n        // texture deets..\n        page: parseInt(charNode.page, 10) || 0,\n        x: parseInt(charNode.x, 10),\n        y: parseInt(charNode.y, 10),\n        width: parseInt(charNode.width, 10),\n        height: parseInt(charNode.height, 10),\n        xOffset: parseInt(charNode.xoffset, 10),\n        yOffset: parseInt(charNode.yoffset, 10),\n        xAdvance: parseInt(charNode.xadvance, 10),\n        kerning: {}\n      };\n    }\n    const kerning = rawData.kerning || [];\n    for (let i = 0; i < kerning.length; i++) {\n      const first = parseInt(kerning[i].first, 10);\n      const second = parseInt(kerning[i].second, 10);\n      const amount = parseInt(kerning[i].amount, 10);\n      font.chars[map[second]].kerning[map[first]] = amount;\n    }\n    return font;\n  }\n};\n\nexport { bitmapFontTextParser };\n//# sourceMappingURL=bitmapFontTextParser.mjs.map\n","\"use strict\";\nconst bitmapFontXMLParser = {\n  test(data) {\n    const xml = data;\n    return typeof xml !== \"string\" && \"getElementsByTagName\" in xml && xml.getElementsByTagName(\"page\").length && xml.getElementsByTagName(\"info\")[0].getAttribute(\"face\") !== null;\n  },\n  parse(xml) {\n    const data = {\n      chars: {},\n      pages: [],\n      lineHeight: 0,\n      fontSize: 0,\n      fontFamily: \"\",\n      distanceField: null,\n      baseLineOffset: 0\n    };\n    const info = xml.getElementsByTagName(\"info\")[0];\n    const common = xml.getElementsByTagName(\"common\")[0];\n    const distanceField = xml.getElementsByTagName(\"distanceField\")[0];\n    if (distanceField) {\n      data.distanceField = {\n        type: distanceField.getAttribute(\"fieldType\"),\n        range: parseInt(distanceField.getAttribute(\"distanceRange\"), 10)\n      };\n    }\n    const page = xml.getElementsByTagName(\"page\");\n    const char = xml.getElementsByTagName(\"char\");\n    const kerning = xml.getElementsByTagName(\"kerning\");\n    data.fontSize = parseInt(info.getAttribute(\"size\"), 10);\n    data.fontFamily = info.getAttribute(\"face\");\n    data.lineHeight = parseInt(common.getAttribute(\"lineHeight\"), 10);\n    for (let i = 0; i < page.length; i++) {\n      data.pages.push({\n        id: parseInt(page[i].getAttribute(\"id\"), 10) || 0,\n        file: page[i].getAttribute(\"file\")\n      });\n    }\n    const map = {};\n    data.baseLineOffset = data.lineHeight - parseInt(common.getAttribute(\"base\"), 10);\n    for (let i = 0; i < char.length; i++) {\n      const charNode = char[i];\n      const id = parseInt(charNode.getAttribute(\"id\"), 10);\n      let letter = charNode.getAttribute(\"letter\") ?? charNode.getAttribute(\"char\") ?? String.fromCharCode(id);\n      if (letter === \"space\")\n        letter = \" \";\n      map[id] = letter;\n      data.chars[letter] = {\n        id,\n        // texture deets..\n        page: parseInt(charNode.getAttribute(\"page\"), 10) || 0,\n        x: parseInt(charNode.getAttribute(\"x\"), 10),\n        y: parseInt(charNode.getAttribute(\"y\"), 10),\n        width: parseInt(charNode.getAttribute(\"width\"), 10),\n        height: parseInt(charNode.getAttribute(\"height\"), 10),\n        // render deets..\n        xOffset: parseInt(charNode.getAttribute(\"xoffset\"), 10),\n        yOffset: parseInt(charNode.getAttribute(\"yoffset\"), 10),\n        // + baseLineOffset,\n        xAdvance: parseInt(charNode.getAttribute(\"xadvance\"), 10),\n        kerning: {}\n      };\n    }\n    for (let i = 0; i < kerning.length; i++) {\n      const first = parseInt(kerning[i].getAttribute(\"first\"), 10);\n      const second = parseInt(kerning[i].getAttribute(\"second\"), 10);\n      const amount = parseInt(kerning[i].getAttribute(\"amount\"), 10);\n      data.chars[map[second]].kerning[map[first]] = amount;\n    }\n    return data;\n  }\n};\n\nexport { bitmapFontXMLParser };\n//# sourceMappingURL=bitmapFontXMLParser.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { bitmapFontXMLParser } from './bitmapFontXMLParser.mjs';\n\n\"use strict\";\nconst bitmapFontXMLStringParser = {\n  test(data) {\n    if (typeof data === \"string\" && data.includes(\"<font>\")) {\n      return bitmapFontXMLParser.test(DOMAdapter.get().parseXML(data));\n    }\n    return false;\n  },\n  parse(data) {\n    return bitmapFontXMLParser.parse(DOMAdapter.get().parseXML(data));\n  }\n};\n\nexport { bitmapFontXMLStringParser };\n//# sourceMappingURL=bitmapFontXMLStringParser.mjs.map\n","import { LoaderParserPriority } from '../../../assets/loader/parsers/LoaderParser.mjs';\nimport { copySearchParams } from '../../../assets/utils/copySearchParams.mjs';\nimport { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { path } from '../../../utils/path.mjs';\nimport { BitmapFont } from '../BitmapFont.mjs';\nimport { bitmapFontTextParser } from './bitmapFontTextParser.mjs';\nimport { bitmapFontXMLStringParser } from './bitmapFontXMLStringParser.mjs';\n\n\"use strict\";\nconst validExtensions = [\".xml\", \".fnt\"];\nconst bitmapFontCachePlugin = {\n  extension: ExtensionType.CacheParser,\n  test: (asset) => asset instanceof BitmapFont,\n  getCacheableAssets(keys, asset) {\n    const out = {};\n    keys.forEach((key) => {\n      out[key] = asset;\n    });\n    out[`${asset.fontFamily}-bitmap`] = asset;\n    return out;\n  }\n};\nconst loadBitmapFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Normal\n  },\n  test(url) {\n    return validExtensions.includes(path.extname(url).toLowerCase());\n  },\n  async testParse(data) {\n    return bitmapFontTextParser.test(data) || bitmapFontXMLStringParser.test(data);\n  },\n  async parse(asset, data, loader) {\n    const bitmapFontData = bitmapFontTextParser.test(asset) ? bitmapFontTextParser.parse(asset) : bitmapFontXMLStringParser.parse(asset);\n    const { src } = data;\n    const { pages } = bitmapFontData;\n    const textureUrls = [];\n    for (let i = 0; i < pages.length; ++i) {\n      const pageFile = pages[i].file;\n      let imagePath = path.join(path.dirname(src), pageFile);\n      imagePath = copySearchParams(imagePath, src);\n      textureUrls.push(imagePath);\n    }\n    const loadedTextures = await loader.load(textureUrls);\n    const textures = textureUrls.map((url) => loadedTextures[url]);\n    const bitmapFont = new BitmapFont({\n      data: bitmapFontData,\n      textures\n    }, src);\n    return bitmapFont;\n  },\n  async load(url, _options) {\n    const response = await DOMAdapter.get().fetch(url);\n    return await response.text();\n  },\n  async unload(bitmapFont, _resolvedAsset, loader) {\n    await Promise.all(bitmapFont.pages.map((page) => loader.unload(page.texture.source._sourceOrigin)));\n    bitmapFont.destroy();\n  }\n};\n\nexport { bitmapFontCachePlugin, loadBitmapFont };\n//# sourceMappingURL=loadBitmapFont.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vColor * calculateMSDFAlpha(outColor, localUniforms.uDistance);\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vColor * calculateMSDFAlpha(outColor, uDistance);\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                return alpha;\n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                return alpha;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { maxRecommendedTextures } from '../../../rendering/renderers/shared/texture/utils/maxRecommendedTextures.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = maxRecommendedTextures();\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    });\n    const glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._renderer = renderer;\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        if (!this._sdfShader) {\n          this._sdfShader = new SdfShader();\n        }\n        context.customShader = this._sdfShader;\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = (style._stroke?.width || 0) / 2;\n    currentY += bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    context.translate(\n      -bitmapText._anchor._x * bitmapTextLayout.width - padding,\n      -bitmapText._anchor._y * (bitmapTextLayout.height + bitmapTextLayout.offsetY) - padding\n    ).scale(scale, scale);\n    const tint = style._fill.color;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", () => {\n      this.destroyRenderable(bitmapText);\n    });\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const resolution = bitmapText.resolution ?? this._renderer.resolution;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale) * resolution;\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._sdfShader?.destroy(true);\n    this._sdfShader = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { loadBitmapFont, bitmapFontCachePlugin } from './asset/loadBitmapFont.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe, loadBitmapFont, bitmapFontCachePlugin);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", () => {\n      this.destroyRenderable(htmlText);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HtmlTextStyle.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS(style, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","import { CanvasTextMetrics } from '../../text/canvas/CanvasTextMetrics.mjs';\nimport { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const descenderPadding = CanvasTextMetrics.measureFont(style.fontStyle).descent;\n  return {\n    width: contentBounds.width,\n    height: contentBounds.height + descenderPadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HtmlTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    image.width = width | 0;\n    image.height = height | 0;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    let resource = image;\n    if (this._createCanvas) {\n      resource = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(resource, image.width, image.height, resolution);\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  CanvasPool.returnCanvasAndContext(canvasAndContext);\n  return canvasAndContext.canvas;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern.mjs';\n\n\"use strict\";\nfunction getCanvasFillStyle(fillStyle, context) {\n  if (fillStyle.texture === Texture.WHITE && !fillStyle.fill) {\n    return Color.shared.setValue(fillStyle.color).toHex();\n  } else if (!fillStyle.fill) {\n    const pattern = context.createPattern(fillStyle.texture.source.resource, \"repeat\");\n    const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n    tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillPattern) {\n    const fillPattern = fillStyle.fill;\n    const pattern = context.createPattern(fillPattern.texture.source.resource, \"repeat\");\n    const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n    tempMatrix.scale(\n      fillPattern.texture.frame.width,\n      fillPattern.texture.frame.height\n    );\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillGradient) {\n    const fillGradient = fillStyle.fill;\n    if (fillGradient.type === \"linear\") {\n      const gradient = context.createLinearGradient(\n        fillGradient.x0,\n        fillGradient.y0,\n        fillGradient.x1,\n        fillGradient.y1\n      );\n      fillGradient.gradientStops.forEach((stop) => {\n        gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n      });\n      return gradient;\n    }\n  }\n  warn(\"FillStyle not recognised\", fillStyle);\n  return \"red\";\n}\n\nexport { getCanvasFillStyle };\n//# sourceMappingURL=getCanvasFillStyle.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      const resolution = text.resolution ?? this._renderer.resolution;\n      const { width, height } = this._renderer.canvasText.getTextureSize(\n        text.text,\n        resolution,\n        text._style\n      );\n      if (\n        // is only being used by this text:\n        this._renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1 && width === gpuText.texture._source.width && height === gpuText.texture._source.height\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, _instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    const padding = text._style.padding;\n    updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    this._updateText(text);\n    text.on(\"destroyed\", () => {\n      this.destroyRenderable(text);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      TexturePool.returnTexture(activeTexture.texture);\n      const source = activeTexture.texture.source;\n      source.resource = null;\n      source.uploadMethodId = \"unknown\";\n      source.alphaMode = \"no-premultiply-alpha\";\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    const padding = style.padding * 2;\n    context.clearRect(0, 0, measured.width + 4 + padding, measured.height + 4 + padding);\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.globalAlpha = style._fill?.alpha ?? 1;\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n        if (style._stroke?.width) {\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","LOW","stop","start","Ticker","shared","oldTicker","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","clear","_getGlobalBoundsRecursive","isValid","renderGroup","applyMatrix","localTransform","parentRenderGroup","worldTransform","localDisplayStatus","measurable","manageEffects","effects","length","localBounds","boundsArea","addRect","viewBounds","addFrame","minX","minY","maxX","maxY","groupTransform","children","i","advanced","addBounds","copyTo","invert","relativeGroupTransform","return","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","location","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_activeFilterData","backTexture","filters","_getFilterData","filterData","skip","renderables","matrix","renderable","globalDisplayStatus","getGlobalRenderableBounds","filterArea","colorTextureSource","renderTarget","rootRenderTarget","colorTexture","source","resolution","_resolution","padding","antialias","blendRequired","enabled","Math","min","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","scale","fitBounds","pad","ceil","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","prepend","texture","translate","anchor","WebGLSystem","WebGPUSystem","batchSamplersUniformGroupHash","getBatchSamplersUniformGroup","maxTextures","batchSamplersUniformGroup","sampleValues","Int32Array","uTextures","size","isStatic","CanvasPool","canvasOptions","_canvasPool","create","enableFullScreen","_createCanvasAndContext","canvas","createCanvas","context","getContext","getOptimalCanvasAndContext","minWidth","minHeight","key","canvasAndContext","returnCanvasAndContext","GraphicsPipe","adaptor","State","for2d","_graphicsBatchesHash","_adaptor","validateRenderable","graphics","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","_didGraphicsUpdate","_rebuild","_addToBatcher","updateRenderable","batches","batcher","updateElement","destroyRenderable","_removeBatchForRenderable","isRenderable","getGpuContext","customShader","blendMode","groupBlendMode","localUniforms","resources","uTransformMatrix","uRound","_roundPixels","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BatchableGraphics","on","graphicsUid","forEach","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","checkAndUpdateTexture","gpuBatchableMesh","_texture","gpuMesh","_initMeshData","_initBatchableMesh","BatchableMesh","_uvUpdateId","_textureMatrixUpdateId","reset","packIndex","index","indicesOffset","packAttributes","float32View","uint32View","textureId","wt","textureIdAndRound","a","b","c","d","tx","ty","uvBuffer","getBuffer","uvs","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","abgr","_MeshGeometry","args","defaultOptions","shrinkToFit","shrinkBuffersToFit","super","label","usage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","_PlaneGeometry","deprecation","verticesX","verticesY","build","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","updateUvs","updatePositions","w","scaleW","h","scaleH","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","_instructionSet","gpuSprite","_getGpuSprite","_didSpriteUpdate","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","vertex","header","main","fragment","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","bits","localUniformBit","roundPixelsBit","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","uTexture","uSampler","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_didTilingSpriteUpdate","_updateBatchableMesh","bindGroup","default2d","_tileTransform","_initTilingSpriteData","slice","renderableData","addressMode","_applyAnchorToTexture","copyFrom","array","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","AbstractBitmapFont","arguments","chars","lineHeight","fontFamily","fontMetrics","fontSize","ascent","descent","baseLineOffset","distanceField","range","pages","baseMeasurementFontSize","baseRenderedFontSize","font","pageTextures","distanceFieldRange","distanceFieldType","destroyTextures","emit","removeAllListeners","page","resolveCharacters","result","j","item","Array","isArray","Error","startCode","charCodeAt","endCode","i2","j2","String","fromCharCode","from","DynamicBitmapFont","_padding","_measureCache","_currentChars","_currentX","_currentY","_currentPageIndex","_skipKerning","dynamicOptions","clone","overrideFill","_fill","color","alpha","WHITE","fill","requestedFontSize","fontStringFromTextStyle","overrideSize","_stroke","_style","skipKerning","CanvasTextMetrics","measureFont","ensureCharacters","charList","char","includes","self","indexOf","pageData","_nextPage","textureSource","currentX","currentY","fontScale","widthScale","fontStyle","maxCharHeight","skipTexture","metrics","measureText","paddedWidth","paddedHeight","max","pageData2","xAdvance","dropShadow","distance","id","codePointAt","xOffset","yOffset","kerning","_drawGlyph","px","py","Rectangle","_applyKerning","newChars","measureCache","first","second","c1","c2","amount","textureResolution","_setupContext","ImageSource","resource","alphaMode","textBaseline","stroke","strokeThickness","lineWidth","lineJoin","join","miterLimit","strokeStyle","getCanvasFillStyle","fillStyle","shadowOptions","rgb","Color","setValue","toArray","dropShadowBlur","blur","dropShadowDistance","shadowColor","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","text","fontProperties","strokeText","fillText","getBitmapTextLayout","layoutData","offsetY","lines","charPositions","spaceWidth","spacesIndex","currentLine","previousChar","firstWord","currentWord","spaceWord","nextWord","word","position","nextLine","lastChar","adjustedLetterSpacing","letterSpacing","adjustedWordWrapWidth","wordWrapWidth","isEnd","charData","test","wordWrap","nextCharWidth","align","measurementData","line","alignCenter","alignRight","indy","spaceIndex","totalSpaces","alignJustify","BitmapFontManager","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","getFont","fontFamilyKey","Cache","has","fnt","once","dynamicFont","getLayout","bitmapFont","install","textStyle","TextStyle","flatChars","uninstall","cacheKey","BitmapFont","url","textures","keys","parseInt","textureFrame","frameReal","bitmapFontTextParser","startsWith","parse","txt","items","match","rawData","info","common","kernings","attributeList","itemData","split","strValue","replace","floatValue","parseFloat","isNaN","distanceRange","fieldType","face","file","base","charNode","letter","xoffset","yoffset","xadvance","bitmapFontXMLParser","xml","getElementsByTagName","getAttribute","bitmapFontXMLStringParser","parseXML","validExtensions","bitmapFontCachePlugin","CacheParser","asset","getCacheableAssets","out","loadBitmapFont","LoadParser","priority","LoaderParser","Normal","path","extname","toLowerCase","async","loader","bitmapFontData","src","textureUrls","pageFile","imagePath","dirname","copySearchParams","loadedTextures","load","_options","response","fetch","unload","_resolvedAsset","Promise","all","_sourceOrigin","localUniformMSDFBit","end","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","maxRecommendedTextures","colorBit","generateTextureBatchBit","batchSamplers","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","_sdfShader","bitmapTextLayout","_anchor","_x","_y","tint","round","initGpuText","proxyRenderable","Graphics","dx","sqrt","dy","worldScale","abs","proxy","groupColor","groupAlpha","HTMLTextPipe","_gpuText","htmlText","gpuText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateQuadBounds","generatingTexture","getManagedTexture","onViewUpdate","gpuTextData","BatchableSprite","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","dropShadowToCSS","dropShadowStyle","setAlpha","toHexa","strokeToCSS","toHex","templates","fontWeight","fontVariant","whiteSpace","transform","breakWords","HTMLTextStyle","_cssOverrides","cssOverrides","tagStyles","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","cssStyle","cssStyles","tagStyle","cssTagStyle","tagStyleToCSS","textStyleToCSS","addOverride","toAdd","v","removeOverride","toRemove","loadFontCSS","dataSrc","blob","reader","FileReader","resolve","reject","onloadend","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","addFontFamily","fontFamily2","trim","extractFontFamilies","fontCSS","fontPromises","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","descenderPadding","measureHtmlText","svgURL","toString","XMLSerializer","serializeToString","getSVGUrl","delay","resolve2","setTimeout","onload","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","isSafari","clearRect","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","initSource","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","pattern","createPattern","setTransform","fillPattern","fillGradient","gradient","createLinearGradient","x0","y0","x1","y1","gradientStops","addColorStop","CanvasTextPipe","canvasText","getTextureSize","textUid","checkRow","checkColumn","top","bottom","CanvasTextSystem","_textKey","createTextureAndCanvas","renderTextToCanvas","trimmed","willReadFrequently","TypeError","getImageData","left","right","getCanvasBoundingBox","lineWidths","maxLineWidth","resetTransform","lineCap","cap","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","dropShadowColor","dropShadowAlpha","toRgbaString","globalAlpha","linePositionYShift","strokeWidth","_drawLetterSpacing","isStroke","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","tempBounds"],"sourceRoot":""}